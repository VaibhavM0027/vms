rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) ?
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role : null;
    }
    
    function hasRole(role) {
      return isSignedIn() && getUserRole() == role;
    }
    
    function isAdmin() {
      return isSignedIn() && getUserRole() == 'admin';
    }
    
    function canCreateUserProfile() {
      return isSignedIn() && !exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    match /visitors/{visitorId} {
      // Admin and receptionist full access
      allow read, write: if isAdmin() || (isSignedIn() && getUserRole() == 'receptionist');

      // Visitor: can create own registration and read/update own records
      // Allow public visitor registration for self-registration
      allow read: if true;
      allow create: if true || isSignedIn(); // Allow both authenticated and unauthenticated users to create
      
      // Allow updates for authenticated users (visitors updating their own records)
      allow update: if isSignedIn() && 
        (getUserRole() == 'visitor' || getUserRole() == 'guard' || getUserRole() == 'host' || 
         getUserRole() == 'receptionist' || isAdmin());

      // Guard: can update checkIn/checkOut
      allow update: if isSignedIn() && getUserRole() == 'guard';
      
      // Host: can approve/reject visitors
      allow update: if isSignedIn() && getUserRole() == 'host';
    }

    match /users/{userId} {
      // Allow reading user documents for authenticated users
      allow read: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      
      // Allow user creation during registration (authenticated users can create their profile)
      allow create: if isSignedIn() && request.auth.uid == userId;
      
      // Allow profile creation for missing user documents during login
      allow create: if canCreateUserProfile() && request.auth.uid == userId;
      
      // Allow admin to create any user
      allow create: if isAdmin();
      
      // Allow users to update their own profile or admin to update any
      allow update: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      
      // Only admin can delete users
      allow delete: if isAdmin();
    }

    match /hosts/{hostId} {
      allow read: if isSignedIn();
      allow write: if isAdmin() || (isSignedIn() && getUserRole() == 'receptionist');
    }

    match /visits/{visitId} {
      allow read, write: if isSignedIn();
    }

    // Checkout Requests access control
    match /checkoutRequests/{requestId} {
      // Guards can create checkout requests
      allow create: if isSignedIn() && getUserRole() == 'guard';
      
      // Guards can read their own checkout requests and listen for status changes
      allow read: if isSignedIn() && (
        getUserRole() == 'guard' ||
        getUserRole() == 'admin' ||
        getUserRole() == 'receptionist'
      );
      
      // Admins and receptionists can update checkout request status (approve/reject/complete)
      allow update: if isSignedIn() && (
        getUserRole() == 'admin' ||
        getUserRole() == 'receptionist' ||
        (getUserRole() == 'guard' && 
         request.resource.data.diff(resource.data).changedKeys().hasOnly(['status']) &&
         request.resource.data.status == 'completed')
      );
      
      // Only admins can delete checkout requests
      allow delete: if isAdmin();
    }

    // Notifications access control
    match /notifications/{notificationId} {
      function isNotificationRecipient() {
        return isSignedIn() && (
          // notifications may target a specific user
          resource.data.userId == request.auth.uid ||
          // or target a host by hostId matching the current user id
          resource.data.hostId == request.auth.uid
        );
      }

      // Read notifications if you are the recipient or you are admin
      allow get, list: if isAdmin() || isNotificationRecipient();

      // Create notifications allowed to authenticated services/clients; restrict to admins/hosts if needed
      allow create: if isAdmin() || (isSignedIn() && (getUserRole() == 'host' || getUserRole() == 'receptionist'));

      // Allow marking as read or updating limited fields by recipient or admin
      allow update: if isAdmin() || (
        isNotificationRecipient() &&
        request.resource.data.diff(resource.data).changedKeys().hasOnly(['read'])
      );

      // Admin can delete any; recipient can delete their own
      allow delete: if isAdmin() || isNotificationRecipient();
    }
  }
}

// Firebase Storage Rules
service firebase.storage {
  match /b/{bucket}/o {
    // Allow public read access to visitor photos and ID images
    match /visitor_photos/{allPaths=**} {
      allow read: if true;
      // Allow write for authenticated users (receptionists, guards, etc.)
      // and for direct visitor uploads (limited by client-side validation)
      allow write: if request.auth != null || 
                   request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    match /visitor_ids/{allPaths=**} {
      allow read: if true;
      // Allow write for authenticated users (receptionists, guards, etc.)
      // and for direct visitor uploads (limited by client-side validation)
      allow write: if request.auth != null || 
                   request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }
  }
}